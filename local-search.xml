<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串替换</title>
    <link href="/2020/03/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2/"/>
    <url>/2020/03/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串替换新"><a class="markdownIt-Anchor" href="#字符串替换新"></a> 字符串替换（新）</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>编写程序将一个指定文件中某一字符串替换为另一个字符串。要求：</p><ol><li>被替换字符串若有多个，均要被替换；</li><li>指定的被替换字 符串，大小写无关。</li></ol><h2 id="输入形式"><a class="markdownIt-Anchor" href="#输入形式"></a> 输入形式</h2><p>给定文件名为filein.txt。从控制台输入两行字符串（不含空格，行末尾都有回车换行符），分别表示被替换的字符串和替换字符串。</p><h2 id="输出形式"><a class="markdownIt-Anchor" href="#输出形式"></a> 输出形式</h2><p>将替换后的结果输出到文件fileout.txt中。</p><h2 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h2><p>从控制台输入两行字符串：</p><p>in</p><p>out</p><p>文件filein.txt的内容为：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  FILE * IN;  <span class="hljs-keyword">if</span>((IN=fopen(<span class="hljs-string">"in.txt"</span>,<span class="hljs-string">"r"</span>))==<span class="hljs-literal">NULL</span>)  &#123;​    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Can&amp;rsquo;t open in.txt!"</span>);​    <span class="hljs-keyword">return</span>;  &#125;  fclose(IN);&#125;</code></pre><h2 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h2><p>文件fileout.txt的内容应为：</p><pre><code class="hljs c"><span class="hljs-meta">#outclude <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">maout</span><span class="hljs-params">()</span></span><span class="hljs-function"></span><span class="hljs-function"></span>&#123;  FILE * out;  <span class="hljs-keyword">if</span>((out=fopen(<span class="hljs-string">"out.txt"</span>,<span class="hljs-string">"r"</span>))==<span class="hljs-literal">NULL</span>)  &#123;​    prouttf(<span class="hljs-string">"Can&amp;rsquo;t open out.txt!"</span>);​    <span class="hljs-keyword">return</span>;  &#125;  fclose(out);&#125;</code></pre><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>输入的被替换字符串为in，替换字符串为out，即将文件filein.txt中的所有in字符串（包括iN、In、IN字符串）全部替换为out字符串，并输出保存到文件fileout.txt中。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LEN 100</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">str_process</span><span class="hljs-params">(<span class="hljs-keyword">char</span> p[LEN], <span class="hljs-keyword">char</span> a[LEN], <span class="hljs-keyword">char</span> b[LEN])</span> </span>&#123;    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(a), i;    <span class="hljs-keyword">char</span> *q, r[LEN], s[LEN];    <span class="hljs-built_in">strcpy</span>(s, p);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(s); i++) &#123;        <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">'A'</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">'Z'</span>) &#123;            s[i] = s[i] + <span class="hljs-number">32</span>;        &#125;    &#125;    <span class="hljs-keyword">while</span> ((q = <span class="hljs-built_in">strstr</span>(s, a)) != <span class="hljs-literal">NULL</span>) &#123;        p[q - s] = <span class="hljs-string">'\0'</span>;        <span class="hljs-built_in">strcpy</span>(r, p + (q - s) + len);        <span class="hljs-built_in">strcat</span>(p, b);        <span class="hljs-built_in">strcat</span>(p, r);        *q = <span class="hljs-string">'\0'</span>;        <span class="hljs-built_in">strcpy</span>(r, q + len);        <span class="hljs-built_in">strcat</span>(s, b);        <span class="hljs-built_in">strcat</span>(s, r);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">char</span> c[LEN], a[LEN], b[LEN];    gets(a);    gets(b);    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;    FILE *IN, *OUT;    IN = fopen(<span class="hljs-string">"filein.txt"</span>, <span class="hljs-string">"r"</span>);    OUT = fopen(<span class="hljs-string">"fileout.txt"</span>, <span class="hljs-string">"w"</span>);    <span class="hljs-keyword">while</span> (fgets(c, LEN, IN)) &#123;        str_process(c, a, b);        <span class="hljs-built_in">fputs</span>(c, OUT);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第二次作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>五子棋危险判断</title>
    <link href="/2020/03/12/%E4%BA%94%E5%AD%90%E6%A3%8B%E5%8D%B1%E9%99%A9%E5%88%A4%E6%96%AD/"/>
    <url>/2020/03/12/%E4%BA%94%E5%AD%90%E6%A3%8B%E5%8D%B1%E9%99%A9%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="五子棋危险判断"><a class="markdownIt-Anchor" href="#五子棋危险判断"></a> 五子棋危险判断</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>已知两人分别执白棋和黑棋在一个围棋棋盘上下五子棋，若同一颜色的棋子在同一条横行、纵行或斜线上连成5个棋子，则执该颜色棋子的人获胜。编写程序读入某一时刻下棋的状态，并判断是否有人即将获胜，即：同一颜色的棋子在同一条横行、纵列或斜线上连成4个棋子，且该4个棋子的两端至少有一端为空位置。<br />输入的棋盘大小是19×19，用数字0表示空位置（即没有棋子），用数字1表示该位置下了一白色棋子，用数字2表示该位置下了一黑色棋子。假设同一颜色的棋子在同一条横行、纵列或斜线上连成的棋子个数不会超过4个，并且最多有一人连成线的棋子个数为4。</p><p>##输入形式</p><p>从控制台输入用来表示棋盘状态的数字0、1或2；每行输入19个数字，各数字之间以一个空格分隔，每行最后一个数字后没有空格；共输入19行表示棋盘状态的数字。</p><h2 id="输出形式"><a class="markdownIt-Anchor" href="#输出形式"></a> 输出形式</h2><p>若有人即将获胜，则先输出即将获胜人的棋子颜色（1表示白色棋子，2表示黑色棋子），然后输出英文冒号:，最后输出连成4个棋子连线的起始位置（棋盘横行自上往下、纵列自左往右从1开始计数，横行最小的棋子在棋盘上的横行数和纵列数作为连线的起始位置，若在同一行上，则纵列数最小的棋子位置作为起始位置，两数字之间以一个英文逗号,作为分隔符）。<br />若没有人获胜，则输出英文字符串：No。<br />无论输出什么结果，最后都要有回车换行符。</p><h2 id="输入样例1"><a class="markdownIt-Anchor" href="#输入样例1"></a> 输入样例1</h2><p>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 2 0 1 1 2 0 0 0 0 0 0 0<br />0 0 0 0 0 2 1 1 1 1 2 2 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 1 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 1 1 0 2 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 2 0 1 0 0 2 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><h2 id="输出样例1"><a class="markdownIt-Anchor" href="#输出样例1"></a> 输出样例1</h2><p>1:9,8</p><h2 id="输入样例2"><a class="markdownIt-Anchor" href="#输入样例2"></a> 输入样例2</h2><p>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br />0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</p><h2 id="输出样例2"><a class="markdownIt-Anchor" href="#输出样例2"></a> 输出样例2</h2><p>No</p><h2 id="样例说明"><a class="markdownIt-Anchor" href="#样例说明"></a> 样例说明</h2><p>在输入的样例1中，执白棋（数字1表示）的人即将获胜，连成4个棋子且有一端为空的起始位置在第9行第8列，所以输出1:9,8。<br />在输入的样例2中，还没有同一颜色的棋子连成4个，所以无人即将获胜，直接输出No。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><pre><code class="hljs c"><span class="hljs-comment">//此题并不严谨，仅考虑了四种同色相邻且一段为空的情况</span><span class="hljs-comment">//此题中每种情况的后三列/排可以不用考虑，可以在某种程度下简化算法</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">//已知五子棋为19*19，但存在判断两端端点情况，故多加两行两列作为边框</span>    <span class="hljs-keyword">int</span> chess[<span class="hljs-number">21</span>][<span class="hljs-number">21</span>]=&#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,n=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;chess[i][j]);        &#125;    &#125;    <span class="hljs-comment">//将边框初始化为'5'</span>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">21</span>;i++)&#123;        chess[i][<span class="hljs-number">1</span>]=<span class="hljs-number">5</span>;        chess[i][<span class="hljs-number">20</span>]=<span class="hljs-number">5</span>;        chess[<span class="hljs-number">1</span>][i]=<span class="hljs-number">5</span>;        chess[<span class="hljs-number">20</span>][i]=<span class="hljs-number">5</span>;    &#125;    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">17</span>;i++)&#123;        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">17</span>;j++)&#123;            <span class="hljs-keyword">if</span>(chess[i][j]!=<span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">//判断纵向相连↓</span>                <span class="hljs-keyword">if</span>(chess[i][j]==chess[i+<span class="hljs-number">1</span>][j]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">2</span>][j]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">3</span>][j])&#123;                    <span class="hljs-keyword">if</span>(chess[i<span class="hljs-number">-1</span>][j]==<span class="hljs-number">0</span>||chess[i+<span class="hljs-number">4</span>][j]==<span class="hljs-number">0</span>)&#123;                        n++;                        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d:%d,%d"</span>,chess[i][j],i,j);                        &#125;                    &#125;                &#125;    <span class="hljs-comment">//判断横向相连→</span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chess[i][j]==chess[i][j+<span class="hljs-number">1</span>]&amp;&amp;chess[i][j]==chess[i][j+<span class="hljs-number">2</span>]&amp;&amp;chess[i][j]==chess[i][j+<span class="hljs-number">3</span>])&#123;                    <span class="hljs-keyword">if</span>(chess[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>||chess[i][j+<span class="hljs-number">4</span>]==<span class="hljs-number">0</span>)&#123;                        n++;                        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d:%d,%d"</span>,chess[i][j],i,j);                        &#125;                    &#125;                &#125;    <span class="hljs-comment">//判断从左上至右下相连↘</span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chess[i][j]==chess[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">2</span>][j+<span class="hljs-number">2</span>]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">3</span>][j+<span class="hljs-number">3</span>])&#123;                    <span class="hljs-keyword">if</span>(chess[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>||chess[i+<span class="hljs-number">4</span>][j+<span class="hljs-number">4</span>]==<span class="hljs-number">0</span>)&#123;                        n++;                        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d:%d,%d"</span>,chess[i][j],i,j);                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-comment">//判断右上至左下相连↙，因方向与其他不同，故重新循环</span>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">17</span>;i++)&#123;        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">19</span>;j&gt;<span class="hljs-number">3</span>;j--)&#123;            <span class="hljs-keyword">if</span>(chess[i][j]!=<span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">if</span>(chess[i][j]==chess[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">2</span>][j<span class="hljs-number">-2</span>]&amp;&amp;chess[i][j]==chess[i+<span class="hljs-number">3</span>][j<span class="hljs-number">-3</span>])&#123;                    <span class="hljs-keyword">if</span>(chess[i<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>||chess[i+<span class="hljs-number">4</span>][j<span class="hljs-number">-4</span>]==<span class="hljs-number">0</span>)&#123;                        n++;                        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d:%d,%d"</span>,chess[i][j],i,j);                        &#125;                    &#125;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第二次作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>表达式计算</title>
    <link href="/2020/03/12/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    <url>/2020/03/12/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="表达式计算支持空格连乘连除"><a class="markdownIt-Anchor" href="#表达式计算支持空格连乘连除"></a> 表达式计算（支持空格，连乘，连除）</h1><h2 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h2><p>从标准输入中读入一个整数算术运算表达式，如5 - 1 * 2 * 3 + 12 / 2 / 2  = 。计算表达式结果，并输出。</p><p>要求：</p><ol><li>表达式运算符只有+、-、*、/，表达式末尾的’=’字符表示表达式输入结束，表达式中可能会出现空格；</li><li>表达式中不含圆括号，不会出现错误的表达式；</li><li>出现除号/时，以整数相除进行运算，结果仍为整数，例如：5/3结果应为1。</li></ol><h2 id="输入形式"><a class="markdownIt-Anchor" href="#输入形式"></a> 输入形式</h2><p>在控制台中输入一个以’=’结尾的整数算术运算表达式。</p><h2 id="输出形式"><a class="markdownIt-Anchor" href="#输出形式"></a> 输出形式</h2><p>向控制台输出计算结果（为整数）。</p><h2 id="样例1输入"><a class="markdownIt-Anchor" href="#样例1输入"></a> 样例1输入</h2><p>5 - 1 * 2 * 3 + 12 / 2 / 2  =</p><h2 id="样例1输出"><a class="markdownIt-Anchor" href="#样例1输出"></a> 样例1输出</h2><p>2</p><h2 id="样例2输入"><a class="markdownIt-Anchor" href="#样例2输入"></a> 样例2输入</h2><p>500 =</p><h2 id="样例2输出"><a class="markdownIt-Anchor" href="#样例2输出"></a> 样例2输出</h2><p>500</p><h2 id="样例1说明"><a class="markdownIt-Anchor" href="#样例1说明"></a> 样例1说明</h2><p>输入的表达式为5 - 1 * 2 * 3 + 12 / 2 / 2 =，按照整数运算规则，计算结果为2，故输出2。</p><h2 id="样例2说明"><a class="markdownIt-Anchor" href="#样例2说明"></a> 样例2说明</h2><p>输入的表达式为500 = ，没有运算符参与运算，故直接输出500。</p><p>算法之一提示：</p><ol><li>可以利用gets函数，读取整行表达式；</li><li>对于空格，可以考虑首先去除表达式中的所有空格</li><li>可以设一计数器用来记录已读取、但未参加运算的运算符的个数，根据该计数器来判断如何进行运算；</li><li>可以设计一函数：实现二元整数算术运算。</li></ol><h2 id="代码不完美"><a class="markdownIt-Anchor" href="#代码不完美"></a> 代码（不完美）</h2><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete_space</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *p)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, len = <span class="hljs-built_in">strlen</span>(p);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-string">' '</span>) &#123;        p[i] = <span class="hljs-string">'\0'</span>;        <span class="hljs-built_in">strcat</span>(p, p + i + <span class="hljs-number">1</span>);        i -= <span class="hljs-number">1</span>;        len -= <span class="hljs-number">1</span>;    &#125;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> str[<span class="hljs-number">10000</span>];    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> num[<span class="hljs-number">10000</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag[<span class="hljs-number">10000</span>] = &#123;<span class="hljs-number">0</span>&#125;;    gets(str);    delete_space(str);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">'0'</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">'9'</span>) &#123;            num[i] = str[i] - <span class="hljs-string">'0'</span>;            flag[i] = <span class="hljs-number">1</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (flag[i] == <span class="hljs-number">1</span> &amp;&amp; flag[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;            flag[i] = <span class="hljs-number">0</span>;            num[i + <span class="hljs-number">1</span>] = num[i] * <span class="hljs-number">10</span> + num[i + <span class="hljs-number">1</span>];        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'*'</span> || str[i] == <span class="hljs-string">'/'</span>) &#123;            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'*'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] * num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'/'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] / num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'+'</span> || str[i] == <span class="hljs-string">'-'</span>) &#123;            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'+'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] + num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'-'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] - num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; flag[i] == <span class="hljs-number">0</span>; i++);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, num[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="错误原因"><a class="markdownIt-Anchor" href="#错误原因"></a> 错误原因</h2><ol><li><p>SIGFPE<br />错误原因可能是:<br />零作为除数</p></li><li><p>SIGSEGV<br />错误原因可能是:<br />非法的内存引用, 具体原因可能是:<br />1.数组越界使用;<br />2.指针的错误使用, 一般是对非用户区的地址空间进行读或者写操作;<br />3.越权操作文件指针, 程序中却未捕捉该类错误;<br />4.栈溢出, 一般是因为过多的递归调用或者过大的临时变量导致;<br />5.程序使用的内存超过了题目设定的上限。</p></li></ol><h2 id="可能出错原因"><a class="markdownIt-Anchor" href="#可能出错原因"></a> 可能出错原因</h2><ol><li>删除空格函数<code>delete_space</code>有问题</li><li>函数中<code>strcat()</code>函数在评测机和本地跑出来的效果稍有不同</li></ol><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><p>改写<code>delete_space</code>函数</p><h3 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h3><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete_space</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">NULL</span>)        <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">char</span> *<span class="hljs-built_in">begin</span> = str;    <span class="hljs-keyword">while</span> (*<span class="hljs-built_in">begin</span> &amp;&amp; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>) *<span class="hljs-built_in">begin</span> &lt;= <span class="hljs-number">32</span>) <span class="hljs-built_in">begin</span>++;    <span class="hljs-keyword">if</span> (!*<span class="hljs-built_in">begin</span>) &#123;        *str = <span class="hljs-number">0</span>;        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">while</span> (*str++ = *<span class="hljs-built_in">begin</span>++);    str -= <span class="hljs-number">2</span>;    <span class="hljs-keyword">while</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>) *str-- &lt;= <span class="hljs-number">32</span>);    *(str + <span class="hljs-number">2</span>) = <span class="hljs-number">0</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">char</span> str[<span class="hljs-number">10000</span>];    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> num[<span class="hljs-number">10000</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag[<span class="hljs-number">10000</span>] = &#123;<span class="hljs-number">0</span>&#125;;    gets(str);    delete_space(str);    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] &gt;= <span class="hljs-string">'0'</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">'9'</span>) &#123;            num[i] = str[i] - <span class="hljs-string">'0'</span>;            flag[i] = <span class="hljs-number">1</span>;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (flag[i] == <span class="hljs-number">1</span> &amp;&amp; flag[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;            flag[i] = <span class="hljs-number">0</span>;            num[i + <span class="hljs-number">1</span>] = num[i] * <span class="hljs-number">10</span> + num[i + <span class="hljs-number">1</span>];        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'*'</span> || str[i] == <span class="hljs-string">'/'</span>) &#123;            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'*'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] * num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'/'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] / num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str); i++) &#123;        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'+'</span> || str[i] == <span class="hljs-string">'-'</span>) &#123;            <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'+'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] + num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">'-'</span>) &#123;                str[i] = <span class="hljs-string">'#'</span>;                <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; flag[j] == <span class="hljs-number">0</span>; j--);                <span class="hljs-keyword">for</span> (k = i + <span class="hljs-number">1</span>; flag[k] == <span class="hljs-number">0</span>; k++);                num[j] = num[j] - num[k];                flag[k] = <span class="hljs-number">0</span>;            &#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; flag[i] == <span class="hljs-number">0</span>; i++);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, num[i]);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>第一次作业</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
